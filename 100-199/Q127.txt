from collections import deque
from typing import List
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: [str]) -> int:
        wordSet = set(wordList)
        if endWord not in wordSet:
	        return 0
        wordSet.remove(endWord)
        queueFront = deque([beginWord])
        queueBack = deque([endWord])
        visitedFrontSet = set()
        visitedBackSet = set([endWord])
        count = 2
        while len(queueFront) > 0 and len(queueBack) > 0:
            for i in range(len(queueFront)):
                curWord = queueFront.popleft()
                for i in range(len(curWord)):
                    for j in range(26):
                        if curWord[i] == chr(ord('a') + j): continue
                        newWord = curWord[0:i] + chr(ord('a') + j) + curWord[i+1:]
                        if newWord in visitedBackSet:
                            return count
                        if newWord in wordSet:
                            queueFront.append(newWord)
                            visitedFrontSet.add(newWord)
                            wordSet.remove(newWord)
            count += 1
            for i in range(len(queueBack)):
                curWord = queueBack.popleft()
                for i in range(len(curWord)):
                    for j in range(26):
                        if curWord[i] == chr(ord('a') + j): continue
                        newWord = curWord[0:i] + chr(ord('a') + j) + curWord[i+1:]
                        if newWord in visitedFrontSet:
                            return count
                        if newWord in wordSet:
                            queueBack.append(newWord)
                            visitedBackSet.add(newWord)
                            wordSet.remove(newWord)
            count += 1
        return 0
